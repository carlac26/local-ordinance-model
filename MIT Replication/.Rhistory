fulldata$state_rps[fulldata$state_name=="West Virginia" & fulldata$year<=2015] <- 1 #2009-2015
fulldata$state_rps[fulldata$state_name=="Wisconsin"] <- 1 #since 1998
fulldata$state_rps[fulldata$state_name=="District of Columbia"] <- 1 #since 2005
###generator-level wind and solar energy capacity, by county by year #####
# https://www.eia.gov/electricity/data/eia860/
gen2010 <- read_excel("gen2010.xls") %>% filter(ENERGY_SOURCE_1=="SUN" | ENERGY_SOURCE_1=="WND")
gen2011 <- read_excel("gen2011.xlsx", skip=1) %>% filter(ENERGY_SOURCE_1=="SUN" | ENERGY_SOURCE_1=="WND")
gen2012 <- read_excel("gen2012.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2013 <- read_excel("gen2013.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2014 <- read_excel("gen2014.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2015 <- read_excel("gen2015.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2016 <- read_excel("gen2016.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2017 <- read_excel("gen2017.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2018 <- read_excel("gen2018.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2019 <- read_excel("gen2019.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2020 <- read_excel("gen2020.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2021 <- read_excel("gen2021.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2022 <- read_excel("gen2022.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2023 <- read_excel("gen2023.xlsx", skip=1) %>% filter(`Energy Source 1`=="SUN" | `Energy Source 1`=="WND")
gen2010$year <- 2010; gen2011$year <- 2011; gen2012$year <- 2012; gen2013$year <- 2013
gen2014$year <- 2014; gen2015$year <- 2015; gen2016$year <- 2016; gen2017$year <- 2017
gen2018$year <- 2018; gen2019$year <- 2019; gen2020$year <- 2020; gen2021$year <- 2021;
gen2022$year <- 2022; gen2023$year <- 2023
gen2010 <- gen2010 %>%
select("UTILITY_ID","UTILITY_NAME","PLANT_CODE","PLANT_NAME","GENERATOR_ID","STATE","COUNTY","year","NAMEPLATE","ENERGY_SOURCE_1")
gen2011 <- gen2011 %>%
select("UTILITY_ID","UTILITY_NAME","PLANT_CODE","PLANT_NAME","GENERATOR_ID","STATE","COUNTY","year","NAMEPLATE","ENERGY_SOURCE_1")
gen2012 <- gen2012 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2013 <- gen2013 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2014 <- gen2014 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2015 <- gen2015 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2016 <- gen2016 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2017 <- gen2017 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2018 <- gen2018 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2019 <- gen2019 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2020 <- gen2020 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2021 <- gen2021 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2022 <- gen2022 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
gen2023 <- gen2023 %>%
select("Utility ID","Utility Name","Plant Code","Plant Name","Generator ID","State","County","year","Nameplate Capacity (MW)","Energy Source 1")
varlist <- c("utility_ID", "utility_name", "plant_code", "plant_name", "generator_ID",
"state_abbv","county_name", "year","capacity", "source")
colnames(gen2010) <- colnames(gen2011) <- colnames(gen2012) <- colnames(gen2013) <-
colnames(gen2014) <- colnames(gen2015) <- colnames(gen2016) <- colnames(gen2017) <-
colnames(gen2018) <- colnames(gen2019) <- colnames(gen2020) <- colnames(gen2021) <-
colnames(gen2022) <- colnames(gen2023)<- varlist
gentotal <- rbind(gen2010, gen2011, gen2012, gen2013, gen2014, gen2015, gen2016,
gen2017, gen2018, gen2019, gen2020, gen2021, gen2022, gen2023)
gentotal$county_name <- tolower(gentotal$county_name); fulldata$county_name <- tolower(fulldata$county_name)
# gentotal data has some upper case county names; just use lower case for all datasets for easy merging
mean(gentotal$capacity[gentotal$source=="WND"])
mean(gentotal$capacity[gentotal$source=="SUN"])
windcapa <- gentotal %>% filter(source=="WND") %>%
group_by(state_abbv, county_name, year) %>%
summarize(capacity=sum(capacity))
solarcapa <- gentotal %>% filter(source=="SUN") %>%
group_by(state_abbv, county_name, year) %>%
summarize(capacity=sum(capacity))
#rawdata <- fulldata
fulldata <- left_join(fulldata, windcapa, by=c("state_abbv","county_name","year"))
colnames(fulldata)[12] <- "windcapa"
fulldata <- left_join(fulldata, solarcapa, by=c("state_abbv","county_name","year"))
colnames(fulldata)[13] <- "solarcapa"
fulldata$windcapa[is.na(fulldata$windcapa)] <- 0
View(fulldata)
econ <- read.csv("CAINC4__ALL_AREAS_1969_2020.csv")
pcincome <- econ[,c(1,7, 50:60)] %>% filter(Description=="Per capita personal income (dollars) 4/") %>% select(-Description)
colnames(pcincome)[1] <- c("county_fips")
pcincome <- pcincome %>% gather(year, pcincome, X2010:X2020, factor_key=T)
pcincome$year <- gsub("X","",pcincome$year) %>% as.numeric()
#rawdata <- fulldata
fulldata <- left_join(fulldata, pcincome, by=c("county_fips","year"))
econ <- read.csv("CAINC4__ALL_AREAS_1969_2023.csv")
pcincome1 <- econ[,c(1,7, 50:63)] %>% filter(Description=="Per capita personal income (dollars) 4/") %>% select(-Description)
colnames(pcincome1)[1] <- c("county_fips")
pcincome1 <- pcincome1 %>% gather(year, pcincome1, X2010:X2023, factor_key=T)
pcincome1$year <- gsub("X","",pcincome1$year) %>% as.numeric()
econ <- read.csv("CAINC4__ALL_AREAS_1969_2020.csv")
pcincome <- econ[,c(1,7, 50:60)] %>% filter(Description=="Per capita personal income (dollars) 4/") %>% select(-Description)
colnames(pcincome)[1] <- c("county_fips")
pcincome <- pcincome %>% gather(year, pcincome, X2010:X2020, factor_key=T)
pcincome$year <- gsub("X","",pcincome$year) %>% as.numeric()
View(pcincome1)
econ1 <- read.csv("CAINC4__ALL_AREAS_1969_2023.csv")
View(econ1)
View(econ)
econ$county_fips <- econ$GeoFIPS
View(econ)
econ <- read.csv("CAINC4__ALL_AREAS_1969_2023.csv")
pcincome1 <- econ[,c(1,7, 50:63)] %>% filter(Description=="Per capita personal income (dollars) 4/") %>% select(-Description)
colnames(pcincome1)[1] <- c("county_fips")
pcincome1 <- pcincome1 %>% gather(year, pcincome1, X2010:X2023, factor_key=T)
pcincome1$year <- gsub("X","",pcincome1$year) %>% as.numeric()
fulldata <- left_join(fulldata, pcincome1, by=c("county_fips","year"))
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, rgdal, rgeos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse)
setwd("~/R/MIT Replication")
#import county list
data <- read_excel("county_list.xlsx")
#import sabin center data
sabin <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
year <- c(rep(2010,3142), rep(2011,3142), rep(2012,3142),
rep(2013,3142), rep(2014,3142), rep(2015,3142),
rep(2016,3142), rep(2017,3142), rep(2018,3142),
rep(2019,3142), rep(2020,3142), rep(2021,3142),
rep(2022,3142), rep(2023,3142))
fulldata <- rbind(data,data,data,data,data,
data,data,data,data,data,
data,data,data,data)
View(data)
View(sabin)
filter(sabin, "Local Restriction" == 1)
sabin <- sabin %>%
filter( "Local Restriction" == 1) %>%
select(State, County, Solar, Wind, `Local Restriction`, `Year of Restriction`= year, 15:23)
sabin <- sabin %>%
filter( "Local Restriction" == 1) %>%
select(State, County, Solar, Wind, `Local Restriction`, `Year of Restriction`= year, c(15:23))
sabin <- sabin %>%
filter( "Local Restriction" == 1) %>%
select(State, County, Solar, Wind, `Local Restriction`, `Year of Restriction`= year, [15:23])
sabin <- sabin %>%
filter( "Local Restriction" == 1) %>%
select(State, County, Solar, Wind, `Local Restriction`, `Year of Restriction`= year, 15:23)
sabin <- sabin[,c(2,3,5:11,15:23)]
########################### Data Refinement ##################################
sabin <- filter(sabin, 'Local Restriction' == 1)
#import sabin center data
sabin <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
########################### Data Refinement ##################################
sabin <- sabin %>%
filter(`Local Restriction`==1)
sabin <- sabin[,c(2,3,5:9,11,15:23)] %>% filter()
#import sabin center data
sabin <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
########################### Data Refinement ##################################
sabin <- sabin %>%
filter(`Local Restriction`==1)
sabin <- sabin[,c(2,3,5:7,11,15:23)] %>% filter()
sabin <- sabin[,c(2,3,5:7,11,17:23)] %>% filter()
#import sabin center data
sabin <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
########################### Data Refinement ##################################
sabin <- sabin %>%
filter(`Local Restriction`==1)
sabin <- sabin[,c(2,3,5:7,11,17:23)] %>% filter()
#import sabin center data
sabin_import <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
View(sabin_import)
########################### Data Refinement ##################################
sabin <- sabin_import %>%
filter(`Local Restriction`==1)
sabin <- sabin_import[,c(2,3,5:7,10,11,17:23)] %>% filter(`Local Restriction`==1)
View(sabin)
#Wind
windord <- sabin[,-c(4,6)]
View(windord)
#Wind
windord <- sabin[,-c(4,6)] %>% filter(Wind==1)
View(data)
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>% filter(`Local Restriction`==1) %>%
rename('Year of Restriction'= year)
#import sabin center data
sabin_import <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>% filter(`Local Restriction`==1) %>%
rename('Year of Restriction'= year)
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)]
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>%
filter(`Local Restriction`==1) %>%
rename('Year of Restriction'= year)
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>%
filter(`Local Restriction`==1) %>%
separate_wider_regex(County, c(county_name = ".*", " ", var2 = ".*"))
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>%
filter(`Local Restriction`==1) %>%
separate_wider_regex(County, c(county_name = ".*", " ", var2 = ".*"),too_few = "debug")
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>%
filter(`Local Restriction`==1) %>%
separate_wider_regex(County, c(county_name = ".*", " ", var2 = ".*"),too_few = "align_start")
#Wind
windord <- sabin[,-c(3,4,6)] %>% filter(Wind==1)
View(windord)
windord <- windord[,c(-3)]
colnames(windord) <- c("state_name","county_name", "year", "setback", "height", "noise", "wildlife", "agriculture", "visual_impact", "litigation")
unique(windord$feature) %>% sort()
ordinance <- sabin[,-c(3,6)]
View(ordinance)
ordinances <- sabin[,-c(3,6)]
View(ordinance)
View(ordinances)
ordinances <- sabin[,-c(3,6)]
colnames(ordinances) <- c("state_name","county_name","solar", "wind", "year", "setback", "height", "noise", "wildlife", "agriculture", "visual_impact", "litigation")
year <- c(rep(2010,3142), rep(2011,3142), rep(2012,3142),
rep(2013,3142), rep(2014,3142), rep(2015,3142),
rep(2016,3142), rep(2017,3142), rep(2018,3142),
rep(2019,3142), rep(2020,3142), rep(2021,3142),
rep(2022,3142), rep(2023,3142))
fulldata <- rbind(data,data,data,data,data,
data,data,data,data,data,
data,data,data,data)
fulldata$year <- year
windord_unique <- ordinances %>% select(state_name, county_name, year) %>% filter(wind==1) %>% unique()
windord_unique <- ordinances %>% select(state_name, county_name, year) %>% filter('wind'==1) %>% unique()
View(windord_unique)
windord_unique <- ordinances %>% select(state_name, county_name, year) %>% unique()
windord <- ordinances %>% filter(wind == 1)
solarord <-  ordinances %>% filter(solar == 1)
windord_unique <- windord %>% select(state_name, county_name, year) %>% unique()
solarord_unique <- solarord %>% select(state_name, county_name, year) %>% unique()
windord_unique$windord <- 1 # 241 counties with wind ordinances
solarord_unique$solarord <- 1 # 188 counties with solar ordinances
fulldata <- left_join(fulldata, windord_unique, by=c("state_name","county_name","year"))
#need to manually fix years
write_csv(ordinances, "ordinances_revised.csv")
#need to manually fix years
write_csv(ordinances, "ordinances.csv")
#need to manually fix years
ordinances <- read.csv("ordinances_revised.csv")
View(ordinance)
View(ordinances)
windord <- ordinances %>% filter(wind == 1)
solarord <-  ordinances %>% filter(solar == 1)
windord_unique <- windord %>% select(state_name, county_name, year) %>% unique()
windord_unique$windord <- 1 # 241 counties with wind ordinances
solarord_unique <- solarord %>% select(state_name, county_name, year) %>% unique()
solarord_unique$solarord <- 1 # 188 counties with solar ordinances
fulldata <- left_join(fulldata, windord_unique, by=c("state_name","county_name","year"))
ordinances$year[ordinances$year=="2019"] <- 2019
ordinances$year[ordinances$year=='"2019"'] <- 2019
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(pacman)
library(renv)
library(rlang)
# County-level covariates, 2010-2023
as.double(ordinances$year)
ordinances$year <- as.double(ordinances$year)
windord <- ordinances %>% filter(wind == 1)
solarord <-  ordinances %>% filter(solar == 1)
windord_unique <- windord %>% select(state_name, county_name, year) %>% unique()
windord_unique$windord <- 1 # 241 counties with wind ordinances
solarord_unique <- solarord %>% select(state_name, county_name, year) %>% unique()
solarord_unique$solarord <- 1 # 188 counties with solar ordinances
fulldata <- left_join(fulldata, windord_unique, by=c("state_name","county_name","year"))
sum(windord_unique$windord); sum(fulldata$windord, na.rm=T)
setwd("~/R/local-ordinance-model/MIT Replication")
View(fulldata)
#need to fix years
ordinances <- ordinances %>% drop_na(year)
ordinances$year[ordinances$year=='"2019"'] <- 2019
ordinances$year <- as.double(ordinances$year)
windord <- ordinances %>% filter(wind == 1)
solarord <-  ordinances %>% filter(solar == 1)
windord_unique <- windord %>% select(state_name, county_name, year) %>% unique()
windord_unique$windord <- 1 # 241 counties with wind ordinances
solarord_unique <- solarord %>% select(state_name, county_name, year) %>% unique()
solarord_unique$solarord <- 1 # 188 counties with solar ordinances
fulldata <- left_join(fulldata, windord_unique, by=c("state_name","county_name","year"))
sum(windord_unique$windord); sum(fulldata$windord, na.rm=T) #41 not transferred
View(fulldata)
View(fulldata)
View(ordinances)
View(windord)
View(windord_unique)
ordinances$year <- as.double(ordinances$year)
# County-level covariates, 2010-2023
year <- c(rep(2010,3142), rep(2011,3142), rep(2012,3142),
rep(2013,3142), rep(2014,3142), rep(2015,3142),
rep(2016,3142), rep(2017,3142), rep(2018,3142),
rep(2019,3142), rep(2020,3142), rep(2021,3142),
rep(2022,3142), rep(2023,3142))
fulldata <- rbind(data,data,data,data,data,
data,data,data,data,data,
data,data,data,data)
fulldata$year <- year
windord <- ordinances %>% filter(wind == 1)
solarord <-  ordinances %>% filter(solar == 1)
windord_unique <- windord %>% select(state_name, county_name, year) %>% unique()
windord_unique$windord <- 1 # 241 counties with wind ordinances
solarord_unique <- solarord %>% select(state_name, county_name, year) %>% unique()
solarord_unique$solarord <- 1 # 188 counties with solar ordinances
fulldata <- left_join(fulldata, windord_unique, by=c("state_name","county_name","year"))
sum(windord_unique$windord); sum(fulldata$windord, na.rm=T) #41 not transferred
source("~/R/local-ordinance-model/MIT Replication/code.R")
# geospatial component: adjacency matrix
geo <- st_read("Population_By_County_US_Census_2019.shp")
#install.packages("pacman")
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, rgdal, rgeos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse)
# geospatial component: adjacency matrix
geo <- st_read("Population_By_County_US_Census_2019.shp")
# geospatial component: adjacency matrix
geo <- st_read("tl_2019_us_county.shp")
E <- nb2mat(poly2nb(geo), style = "B", zero.policy = T)
install.packages(c("sf", "ggplot2", "tigris", "ggspatial", "MASS"))
library(sf)         # For handling spatial data
library(ggplot2)    # For visualization
library(tigris)     # For loading US counties
library(ggspatial)  # For map layers
install.packages("ggspatial")  # For map layers
library(MASS)       # For Kernel Density Estimation
library(sf)         # For handling spatial data
library(ggplot2)    # For visualization
library(tigris)     # For loading US counties
library(ggspatial) # For map layers
library(MASS)       # For Kernel Density Estimation
View(geo)
View(geo[[1]][[7]])
geo <- st_transform(counties, crs = 4326)
# Load U.S. county boundaries
counties <- counties(cb = TRUE, resolution = "500k", class = "sf")
# Convert to WGS84 projection (latitude-longitude)
counties <- st_transform(counties, crs = 4326)
View(fulldata)
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, rgdal, rgeos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse)
setwd("~/R/local-ordinance-model/MIT Replication")
########################### Data Refinement ##################################
#import county list
data <- read_excel("county_list.xlsx")
#import sabin center data
sabin_import <- read_excel("Sabin_Center_RELDI_data__June2024.xlsx")
sabin <- sabin_import[,c(2,3,6,7,10,11,17:23)] %>%
filter(`Local Restriction`==1) %>%
separate_wider_regex(County, c(county_name = ".*", " ", var2 = ".*"),too_few = "align_start")
ordinances <- sabin[,-c(3,6)]
colnames(ordinances) <- c("state_name","county_name","solar", "wind", "year", "setback", "height", "noise", "wildlife", "agriculture", "visual_impact", "litigation")
#need to fix years
ordinances <- ordinances %>% drop_na(year)
ordinances$year[ordinances$year=='"2019"'] <- 2019
ordinances$year <- as.double(ordinances$year)
# County-level covariates, 2010-2023
year <- c(rep(2010,3142), rep(2011,3142), rep(2012,3142),
rep(2013,3142), rep(2014,3142), rep(2015,3142),
rep(2016,3142), rep(2017,3142), rep(2018,3142),
rep(2019,3142), rep(2020,3142), rep(2021,3142),
rep(2022,3142), rep(2023,3142))
fulldata <- rbind(data,data,data,data,data,
data,data,data,data,data,
data,data,data,data)
fulldata$year <- year
windord <- ordinances %>% filter(wind == 1)
solarord <-  ordinances %>% filter(solar == 1)
windord_unique <- windord %>% select(state_name, county_name, year) %>% unique()
windord_unique$windord <- 1 # 241 counties with wind ordinances
solarord_unique <- solarord %>% select(state_name, county_name, year) %>% unique()
solarord_unique$solarord <- 1 # 188 counties with solar ordinances
fulldata <- left_join(fulldata, windord_unique, by=c("state_name","county_name","year"))
sum(windord_unique$windord); sum(fulldata$windord, na.rm=T) #8 not transferred
fulldata <- fulldata %>% arrange(state_name, county_name, year)
fulldata <- left_join(fulldata, solarord_unique, by=c("state_name","county_name","year"))
sum(solarord_unique$solarord); sum(fulldata$solarord, na.rm=T) #39 not transferred
write_csv(fulldata,"test.csv")
# Load the dataset
df <- read_csv("~/R/local-ordinance-model/MIT Replication/test.csv")
# Load county shapefile
counties <- counties(cb = TRUE, resolution = "500k", class = "sf")
# Merge county data with solar ordinance dataset
solar_map <- left_join(counties, df, by = c("NAME" = "county_name", "STATEFP" = "state_abbv"))
# Load the dataset
df <- read_csv("~/R/local-ordinance-model/MIT Replication/test.csv")
# Filter data with available solar ordinance values
solar_data <- df %>%
filter(!is.na(solarord)) %>%
select(county_name, state_abbv, solarord)
# Load county shapefile
counties <- counties(cb = TRUE, resolution = "500k", class = "sf")
# Merge county data with solar ordinance dataset
solar_map <- left_join(counties, df, by = c("NAME" = "county_name", "STATEFP" = "state_abbv"))
# Get county centroids for KDE analysis
county_centroids <- st_centroid(solar_map)
# Extract coordinates
coords <- as.data.frame(st_coordinates(county_centroids))
# Merge with solar ordinance data
coords$solarord <- solar_map$solarord
# Remove NA values
coords <- coords %>% filter(!is.na(solarord))
# Perform Kernel Density Estimation
kde <- kde2d(coords$X, coords$Y, n = 100)
geo <- st_read("tl_2019_us_county.shp")
E <- nb2mat(poly2nb(geo), style = "B", zero.policy = T)
# save centroids for potential use
geo$id <- 1:nrow(geo)
geo_sp <- as(geo, "Spatial")
centr <- gCentroid(geo_sp, byid=TRUE)
##Author: Carla Canovi
## 09.26.2024
#load packages
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, rgdal, rgeos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse)
geo <- st_read("tl_2019_us_county.shp")
E <- nb2mat(poly2nb(geo), style = "B", zero.policy = T)
# save centroids for potential use
geo$id <- 1:nrow(geo)
geo_sp <- as(geo, "Spatial")
centr <- gCentroid(geo_sp, byid=TRUE)
##Author: Carla Canovi
## 09.26.2024
#load packages
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, rgdal, rgeos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse, install = TRUE)
warnings()
# County-level covariates, 2010-2023
install.packages('BiocManager')
# County-level covariates, 2010-2023
install.packages('rgeos')
# County-level covariates, 2010-2023
install.packages('geos')
library(geos)
# save centroids for potential use
geo$id <- 1:nrow(geo)
geo_sp <- as(geo, "Spatial")
centr <- gCentroid(geo_sp, byid=TRUE)
centr <- geos_centroid(geo_sp, byid=TRUE)
centr <- geos_centroid(geo_sp)
centr <- st_centroid(geo_sp)
geo_sp <- as(geo, "sf")
centr <- st_centroid(geo_sp)
coord <- as.data.frame(centr@coords)
View(centr)
View(centr)
View(coords)
View(centr)
View(county_centroids)
View(county_centroids)
View(centr)
library(terra)
geo_sp <- vect(geo, TRUE)
centr <- centroids(geo_sp, TRUE)
geo_sp <- vect(geo)
centr <- centroids(geo_sp, TRUE)
View(centr)
##Author: Carla Canovi
## 09.26.2024
#load packages
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, rgdal, geos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse, )
View(solarord)
install.packages("simcf")
r.version()
version()
version
install.packages("~/Downloads/tile_0.4.19.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/simcf_0.2.22.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/tile_0.4.19.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/tile_0.4.19.tgz", repos = NULL, type = .Platform$pkgType)
View(coords)
url <- "https://download.r-forge.r-project.org/bin/windows/contrib/4.4/rgdal_1.6-7.zip"
install.packages(url, type="source", repos=NULL)
install.packages("~/Downloads/rgdal_1.6-7.tar.gz", repos = NULL, type = "source")
install.packages('gdal')
install.packages("~/Downloads/gdal-3.10.2.tar.gz", repos = NULL, type = "source")
brew install gdal
install.packages('devtools')
url <- "https://download.r-forge.r-project.org/bin/windows/contrib/4.4/rgdal_1.6-7.zip"
install.packages(url, type="source", repos=NULL)
##Author: Carla Canovi
## 09.26.2024
#load packages
install_github('OSGeo/gdal')
library(devtools)
##Author: Carla Canovi
## 09.26.2024
#load packages
install_github('OSGeo/gdal')
docker pull ghcr.io/osgeo/gdal:alpine-small-latest
install_github("r-lib/devtools")
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, geos, tile, simfc
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
pacman::p_load(MASS, readxl, tseries, car, tile, simcf, # data refinement
survival, spaMM, plm, coda, fields, # data analysis
sf, sp, tmap, raster, spdep, geos,
ggplot2, ggpubr, shiny, shinyjs, tmaptools, graph4lg, # spatial
tidyverse )
install.packages("~/Downloads/rgdal_1.6-7.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/gdal-3.10.2.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/gdal-3.9.3.tar.gz", repos = NULL, type = "source")
install.packages("~/R/gdal-3.10.2.tar.gz", repos = NULL, type = "source")
brew install gdal
setwd("~/R/local-ordinance-model/MIT Replication")
install.packages("~/Downloads/rgeos_0.6-4.tar.gz", repos = NULL, type = "source")
